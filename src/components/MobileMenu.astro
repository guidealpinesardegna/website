---
import { useTranslation } from "../i18n/utils";
import HamburgerIcon from "../svg/menu.svg";
import CloseIcon from "../svg/x.svg";
import LanguageSwitcher from "./LanguageSwitcher.astro";
const { menuLinks, lang, item } = Astro.props;
const t = useTranslation(lang, "common");
---

<nav>
  <button id="nav-open" aria-expanded="false">
    <HamburgerIcon aria-hidden="true" />
    <span class="sr-only">{t("Menu")}</span>
  </button>

  <div
    id="nav-panel"
    class="fixed z-30 right-0 top-0 py-8 px-4 bg-black text-white w-[75%] translate-x-full flex flex-col gap-1
      transition-transform duration-300 ease-in-out"
  >
    <button id="nav-close" class="self-end">
      <CloseIcon aria-hidden="true" />
      <span class="sr-only">{t("Chiudi")}</span>
    </button>
    <ul role="list" class="flex flex-col gap-2">
      {
        menuLinks.map((link) => (
          <li class="font-medium uppercase">
            <a
              class="block p-2"
              href={link.url}
              aria-current={link.active ? "page" : null}
            >
              {link.text}
            </a>
          </li>
        ))
      }
    </ul>
    <div class="mt-6"><LanguageSwitcher lang={lang} item={item} /></div>
  </div>
</nav>

<script>
  const navPanel = document.getElementById(`nav-panel`);
  const openMenuButton = document.getElementById("nav-open");
  const closeMenuButton = document.getElementById("nav-close");
  const backdrop = document.createElement("div");
  backdrop.setAttribute("aria-hidden", "true");
  backdrop.setAttribute(
    "class",
    "fixed left-0 top-0 z-20 opacity-50 w-full bg-primary"
  );

  function setJsAttributes() {
    navPanel.setAttribute("inert", "");
    navPanel.setAttribute("aria-role", "dialog");
    openMenuButton.setAttribute("aria-controls", "js-main-menu");
    openMenuButton.setAttribute("aria-expanded", "false");
  }

  function trapFocus(element) {
    // get all focusable elements
    const focusableEls = element.querySelectorAll(
      "a[href]:not([disabled]), button:not([disabled])"
    );
    // Save first and last focusable elements
    const firstFocusableEl = focusableEls[0];
    const lastFocusableEl = focusableEls[focusableEls.length - 1];
    const KEYCODE_TAB = 9;

    // listen for a key press
    element.addEventListener("keydown", function (e) {
      const isTabPressed = e.key === "Tab" || e.keyCode === KEYCODE_TAB;

      // if the key pressed is not TAB, stop function execution
      if (!isTabPressed) {
        return;
      }

      // if shift + tab
      if (e.shiftKey) {
        if (document.activeElement === firstFocusableEl) {
          lastFocusableEl.focus();
          e.preventDefault();
        }
      }
      // else if tab
      else {
        if (document.activeElement === lastFocusableEl) {
          firstFocusableEl.focus();
          e.preventDefault();
        }
      }
    });
  }

  function lockBody() {
    document.body.style.overflow = "hidden";
    document.body.style.touchAction = "none";
    document.body.style.height = `${window.innerHeight}px`;
    navPanel.style.height = `${window.innerHeight}px`;
    backdrop.style.height = `${window.innerHeight}px`;
  }

  function unLockBody() {
    document.body.removeAttribute("style");
    navPanel.removeAttribute("style");
    backdrop.removeAttribute("style");
  }

  function openMenu() {
    navPanel.classList.remove("translate-x-full");
    navPanel.classList.add("translate-x-0");

    navPanel.removeAttribute("inert");
    openMenuButton.setAttribute("aria-expanded", "true");
    document.body.appendChild(backdrop);
    lockBody();
    trapFocus(navPanel);

    function handleKeydown(e) {
      if (e.key === "Escape") {
        closeMenu();
      }
    }
    navPanel.addEventListener("keydown", handleKeydown);
    // @ts-ignore
    navPanel._handleKeydown = handleKeydown;
  }

  function closeMenu() {
    navPanel.classList.remove("translate-x-0");
    navPanel.classList.add("translate-x-full");

    navPanel.setAttribute("inert", "");
    openMenuButton.setAttribute("aria-expanded", "false");
    openMenuButton.focus();
    document.body.removeChild(backdrop);
    unLockBody();
    // @ts-ignore
    if (navPanel._handleKeydown) {
      // @ts-ignore
      navPanel.removeEventListener("keydown", navPanel._handleKeydown);
      // @ts-ignore
      delete navPanel._handleKeydown;
    }
  }

  openMenuButton.addEventListener("click", function (e) {
    e.preventDefault();
    openMenu();
  });

  closeMenuButton.addEventListener("click", function (e) {
    e.preventDefault();
    closeMenu();
  });

  setJsAttributes();
</script>
